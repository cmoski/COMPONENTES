//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace WebDemos.net.easychart.data {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Easy Stock Chart Data FeedSoap", Namespace="http://finance.easychart.net")]
    public class EasyStockChartDataFeed : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public EasyStockChartDataFeed() {
            this.Url = "http://data.easychart.net/datafeed.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://finance.easychart.net/Exchange", RequestNamespace="http://finance.easychart.net", ResponseNamespace="http://finance.easychart.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Exchange() {
            object[] results = this.Invoke("Exchange", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExchange(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Exchange", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndExchange(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://finance.easychart.net/EndOfDay", RequestNamespace="http://finance.easychart.net", ResponseNamespace="http://finance.easychart.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EndOfDay(string Exchanges, System.DateTime Date) {
            object[] results = this.Invoke("EndOfDay", new object[] {
                        Exchanges,
                        Date});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEndOfDay(string Exchanges, System.DateTime Date, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EndOfDay", new object[] {
                        Exchanges,
                        Date}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEndOfDay(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://finance.easychart.net/BinaryHistory", RequestNamespace="http://finance.easychart.net", ResponseNamespace="http://finance.easychart.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public System.Byte[] BinaryHistory(string Symbol, bool AddWhenNoSymbol) {
            object[] results = this.Invoke("BinaryHistory", new object[] {
                        Symbol,
                        AddWhenNoSymbol});
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBinaryHistory(string Symbol, bool AddWhenNoSymbol, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BinaryHistory", new object[] {
                        Symbol,
                        AddWhenNoSymbol}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Byte[] EndBinaryHistory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://finance.easychart.net/SymbolList", RequestNamespace="http://finance.easychart.net", ResponseNamespace="http://finance.easychart.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SymbolList(string Exchanges) {
            object[] results = this.Invoke("SymbolList", new object[] {
                        Exchanges});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSymbolList(string Exchanges, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SymbolList", new object[] {
                        Exchanges}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSymbolList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://finance.easychart.net/Industry", RequestNamespace="http://finance.easychart.net", ResponseNamespace="http://finance.easychart.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Industry() {
            object[] results = this.Invoke("Industry", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIndustry(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Industry", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndIndustry(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
    }
}
